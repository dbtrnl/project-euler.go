package problems

import (
	"github.com/dbtrnl/project-euler/golang/pkg/utils"
)

/*
**Problem 1 - Multiples of 3 and 5**

If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.

The sum of these multiples is 23.

---
Find the sum of all the multiples of 3 or 5 below 1000.
*/
func Problem1() int {
	limit, multiples, result := 1000, []int{}, 0

	for num := 0; num < limit; num++ {
		if num%3 == 0 || num%5 == 0 {
			multiples = append(multiples, num)
		}
	}
	for _, num := range multiples {
		result += num
	}
	return result
}

/*
**Problem 2 - Even Fibonacci Numbers**

Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

---
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/
func Problem2() int {
	var sum int
	limit := 4000000
	fibArr := utils.ReturnFibonacciNumbersUntil(limit)

	for i := 0; i <= len(fibArr)-1; i++ {
		if fibArr[i]%2 == 0 {
			sum += fibArr[i]
		}
	}
	return sum
}

/*
**Problem 3 - Largest Prime Factor**

The prime factors of 13195 are 5, 7, 13 and 29.

---
What is the largest prime factor of the number 600851475143?
*/
func Problem3() int {
	input := 600851475143
	return utils.FindLargestPrimeFactor(input)
}

func Problem4() int {
	currentLargestPalindrome := 0

	for i := 100; i < 1000; i++ {
		for j := 100; j < 1000; j++ {
			currentNumber := i * j
			if utils.IsNumberPalindrome(currentNumber) && currentLargestPalindrome < currentNumber {
				currentLargestPalindrome = currentNumber
			}
		}
	}
	return currentLargestPalindrome
}

func Problem5() int {
	min_div, max_div := 1, 20

	currNum := 1
	isDivisible := false

	for !isDivisible {
		isDivisible = utils.IsEvenlyDivisibleByEveryNumberInInterval(currNum, min_div, max_div, "desc")
		if isDivisible {
			break
		} else { currNum++ }
	}
	return currNum
}